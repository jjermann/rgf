// Written by Jonas Jermann <jjermann2@gmail.com>


RGF
===


RGF stands fo Recording Game Format. It could be considered an extension
of the SGF file format. It is mainly intended for the game "Go" but might
be used for other games as well if possible.

An RGF file is stored besides a given SGF file, optionally together its
corresponding media stream file(s). It describes a time-accurate recording
of a game or a lecture, possibly with an associated media (audio or video)
stream. There might be several RGF (and corresponding media) files.
Each such file is referenced in a game-info node in the SGF file which also
contains all of its "header" information, stored in two new properties (GS
and GM, see below). If those properties are properly set we call such a node
a game stream node.

The syntax of the RGF file (see below) is very similar to the SGF syntax but
it is NOT strictly backwards compatible to SGF. The SGF file remains valid
though. All files are bundled together in a .tar file which gets the file
extension .rgt. Consequently this "overall" file format is named RGT.
If it is further compressed with gzip (.tar.gz) the extension is .rgz.


The SYNTAX of RGF deviates from SGF in the following three points:
------------------------------------------------------------------
(1) The order of properties within a node MUST be preserved.
(2) Inside a node there may be more than one property with the same name.
(3) A node may contain conflicting properties.


Additionally there are some restrictions resp. recommendations:
---------------------------------------------------------------
Since no parent nodes of the game stream node can be referenced by the RGF
it is recommended to start with an empty board.

The recorded "game stream" of the RGF reflects a time-accurate recording of
all performed "actions" during the recording. Hence it is not intended to be
changed after its creation (it is not strictly forbidden either though).

If a media stream is present it MUST start at time 0.

The RGF file describes how to get an "SGF content" for an arbitrary time of
the recording. It is recommended to add the initial and/or final SGF file
at the corresponding game stream node.
TODO: Introduce header information describing what time the file corresponds to.
      Problem: if it is added below a game-info node no more game-info nodes
      may be added.

If additional variations are added later they should be added outside the
game stream since they are most probably not part of the recording and use
new/different timing informations. If time-accurate recording for the new
variations is still important it could be added as a new recording in a new
game stream node.

The file basename of the SGF file SHOULD be equal to the basename of the RGT
file.


New SGF properties (both game-info nodes):
------------------------------------------
GS[RGF_FILE:DURATION]: Defines this to be a game stream node.
    The RGF_FILE <string> is the file name of the correspond RGF file.
    The DURATION <double> is the DURATION of the "game stream". If set it MUST
    be equal to or bigger than the last timestamp of the RGF (see below).
    For a final RGF/RGT file (to be saved) the DURATION SHOULD be set.
    If a media stream is present then DURATION SHOULD be smaller or equal to
    the DURATION of the media stream.

GM[SOURCE:TYPE]...[SOURCE:TYPE]: Specifies a list of media streams
    associated to the game stream. SOURCE <string> may be a local file
    (also stored in the .rgt file) or a web address.

    TYPE <string> could be a HTML5 video type of the SOURCE (i.e. "audio/type"
    or "video/type") or just "audio" resp. "video" (base types). Another
    possible (base) type is "youtube" or "vimeo" in case SOURCE is a youtube
    or vimeo link. Two base TYPES SHOULD NOT be mixed (in the list).


For an RGF the usual SGF properties can be used, except for root or
game-info properties. The RGF follows the new syntax mentioned above and has
some additional properties:

 
New RGF properties:
-------------------

TS[TIME]: Defines timestamps for the preceeding property (resp. node).
    The preceeding property (resp. node) is called timestamped property (resp. node).
    TIME <double> is the time in seconds when the property was applied. It SHOULD
    always be non-negative and (as mentiond) MUST NOT exceed the DURATION of
    the game stream. If a property is not followed by a TS[TIME] it is considered
    to be an "initial", non-timestamped PROPERTY. The initial properties
    MUST be consistent with the classical SGF format (i.e. no conflicts or repetitions).
    Properties for a given node MUST be sorted chronologically (increasing)
    from left to right by the time they were added (in particular they MUST
    be sorted by TIME). Two TIME's from two different timestamped nodes MUST
    NOT be equal.

    When viewing a the RGF properties SHOULD be applied according to
    their timestamp. Later timestamped properties SHOULD override the arguments of
    earlier properties. Except if the argument is a list in which case the new
    arguments are added to that list instead. Also if the property is "C" (comment)
    the new comments are added to the old one.
    
    The initial properties describe how to construct an "initial" SGF file
    and the procedure above describes how to modify this file. During this
    process the resulting file MUST always remain a valid SGF file (in
    particular repeated or conflicting properties MUST NOT occur).
    If necessary the RP property below can be used to avoid conflicts (or
    for normal editing actions).

RP[PROPERTY:ARGUMENTS]: Removes the corresponding property or just one list
    entry of it if it is a list propety.
    PROPERTY <string> is the property to be removed/reduced.
    ARGUMENTS is either empty or a comma separated list of arguments with the same type as
    the arguments of the PROPERTY. If ARGUMENTS is empty the whole property is removed.
    If PROPERTY is empty the whole node is removed.
    If both PROPERTY and ARGUMENTS are not empty then the list entries
    from ARGUMENTS are removed from PROPERTY. Each entry in ARGUMENTS SHOULD
    be present in the current PROPERTY.

VT[NAME]: Adds a visual trigger NAME <string>. The handling is up to the
    corresponding applications except for the listed commands below.
    VT SHOULD only effect how the game tree is _displayed_. It MUST NOT
    change the current SGF file representation mentioned above.

    Here are some basic NAMEs for visual triggers:
        VT[N]: Jump to this node (most important visual trigger).
            Note that the current node position also changes in other
            cases (e.g. when we make a move).
            This trigger is used when the node position is "manually" changed
            (e.g. during naviagion), to select the initial node position and
            when we "move" (navigate) to an already existing node.

    Further possible examples might be:
        Switch to the score/edit/etc tool
        mark a stone to be dead/alive in the score tool
        commands for pause/unpause during a recording...
        A property that indicates that the game stream has ended...


Example:
--------

4 files: example.sgf, actualgame.rgf, review.rgf, review.mp3
Stored in a tar file named example.rgt
Note that the final position of "actualgame.rgf" and the final
position of "review.rgf were added." this way also editors which
cannot parse RGF at least get a glimpse of the review...

(Also note that the games below don't make that much sense ;)


example.sgf:
------------
(;GM[1]FF[4]CA[UTF-8]ST[2]
RU[Japanese]SZ[19]HA[2]KM[0.00]
PW[White]PB[Black]AB[pd][dp]PL[W]
(
    ;GS[actualgame.rgf:14]
     AN[Jonas Jermann]
     (
         ;W[pp]
         ;B[dd]
         ;W[qf]
         ;B[od]
         ;W[rd]
     )

    ;GS[review.rgf:56]
     GM[review.mp3:audio]
     AN[Jonas Jermann]
     (
         ;W[pp]
         ;B[dd]
         ;W[qf]
         (
             ;B[od]C[This was a mistake.]
             ;W[rd]C[...this situation]
         )
         (
             ;B[nc]C[You should play here for example.]
             ;W[rd]
             ;B[qc]
             ;W[qi]C[Joseki. So this is better than...]
         )
     )
     (
         ;C[This is an ugly dumpling... So let's remove it]
         ;W[or]
     )
))


actualgame.rgf:
---------------
(
    ;TS[0]W[pp]TS[0]
    ;TS[3.1]B[dd]TS[3.1]
    ;TS[6.1]W[qf]TS[6.1]
    ;TS[10.3]B[od]TS[10.3]
    ;TS[13.6]W[rd]TS[13.6]
)


review.rgf:
-----------
(
    ;W[pp]VT[N]TS[0]
    ;B[dd]VT[N]TS[0.2]
    ;W[qf]VT[N]TS[0.4]
    (
        ;B[od]VT[N]TS[0.6]C[This was a mistake.]TS[7.3]
        ;W[rd]VT[N]TS[7.8]C[...this situation]TS[28.9]
    )
    (
        ;TS[9.2]B[nc]TS[9.2]C[You should play here for example.]TS[12.1]
        ;TS[13]W[rd]TS[13]
        ;TS[14]B[qc]TS[14]
        ;TS[15]W[qi]TS[15]C[Joseki.]TS[22]C[ So this is better than...]TS[25.2]
    )
)
(
    ;TS[41]AB[pp]TS[41]AB[qp]TS[42]AB[pq]TS[43]AB[qq]TS[44]C[This is an ugly dumpling...]TS[50.2]C[ So let's remove it]TS[52]RP[AB,pp]TS[53]RP[AB,qp]TS[54]RP[AB,pq]TS[55]RP[AB,qq]TS[56]
    ;TS[51]W[or]TS[51]
)
