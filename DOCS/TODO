Big things:
-----------
- (MAIN) integrate it into kaya.gs
- how is the interaction with viewers in a lecture?
- think about html elements and how to handle them: css/dynamic html/etc...
- Streams, recording from microphone/webcame/webstream/etc => webRTC
- make a nice media/game interface design
- Add a recorder interface (game interface is for navigation, recorder
  interface is for editing an RGF)
- Add a time bar to the recorder interface
  o The time bar corresponds to a certain time interval (of fixed length)
    of the game stream
  o Visually represent each action on that time bar
  o Use different colors/icons to indicate different types of actions
    or different states (e.g. can be modified or not, initial or not, etc)
  o Update the time interval whenever we update the time
  o Actions can be selected/inserted/changed(/removed?) (if the validity check is ok)
  o Actions can be drag and droped on the time bar (changing their time
    variable), as long as they don't interfere with any other actions.
- Add a visual RGF tree to the recorder interface:
  o Again: use different colors/icons
  o Again: Actions can be selected/inserted/changed/removed
    (where removal means removing the whole subtree)
  o Clicking on a node/property jumps to the corresponding time
  o Maybe: allow drag and drop of nodes/properties/subtrees (?)


Medium things:
--------------
- make a README.markup for github
- add more licensing + copyright information
- Implement a proper fallback mechanism for the MediaStream
- Maybe the GameStream should itself implement KeyFrames if a certain
  "KeyFrame" distance is reached, it would have to call the board for
  this...
- Allow queueing timed Actions without a counter parameter
  (set counter to the last counter)
- Increase the performance of seeking
  1. Rremove debug output
  2. Don't draw the board for each update, only at the end
  3. Implement KeyFrames
- Add more basic checks whether arguments make sense and act accordingly
  (e.g. path descend)...
- Implement and test KeyFrames
- Remove all actions if there is an insertion failed during an attempt to
  apply an action list...
- write tester for MediaStream, MediaInterface, maybe also for RGFNode
- complete the tester for GameStream
- [STARTED] "Clean up" the meaning of "Duration" in all possible contexts


Small things:
-------------
- (BUG) escape character for "]", also be careful about "\\]"...
- Test the removal of actions from the tree and the list
- (BUG) find out why the "node" comparison doesn't work...
- Finnish and polish the linear SGF import tool, i.e. implement other time modes
  like fischer, hourglass, japanese/canadian byo-yomi
- Replay with constant time for each action instead of a time accurate replay.
- "round" times up to 1 ms: Where?!


Unsure:
-------
- Allow game stream node to be anywhere (except inside an already existing
  game stream subtree), this is probably a good idea and would allow
  standalone rgf files without sgf files and (if no media is present) even
  without a tar container... but it has some negative aspects too, for
  instance: an sgf reader would not have access to important "header"
  informations of the rgf game (so we would have to think about this
  carefully)...
- How is the header (and what part of it?) passed on to the MediaStream and GameStream?
- Version property for RGF?
- additional media property for RGF? 
- Undo/Redo?
- At the moment no property lists are allowed for timestamped nodes (but not
  they are not really needed either)...
- Allow time delay for media stream -> adjust status.currentTime accordingly
  (as if there was no delay)!
